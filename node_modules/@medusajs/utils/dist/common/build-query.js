"use strict";
// Those utils are used in a typeorm context and we can't be sure that they can be used elsewhere
Object.defineProperty(exports, "__esModule", { value: true });
exports.buildOrder = exports.buildRelations = exports.buildSelects = void 0;
function buildSelects(selectCollection) {
    return buildRelationsOrSelect(selectCollection);
}
exports.buildSelects = buildSelects;
function buildRelations(relationCollection) {
    return buildRelationsOrSelect(relationCollection);
}
exports.buildRelations = buildRelations;
/**
 * Convert a collection of dot string into a nested object
 * @example
 * input: [
 *    order,
 *    order.items,
 *    order.swaps,
 *    order.swaps.additional_items,
 *    order.discounts,
 *    order.discounts.rule,
 *    order.claims,
 *    order.claims.additional_items,
 *    additional_items,
 *    additional_items.variant,
 *    return_order,
 *    return_order.items,
 *    return_order.shipping_method,
 *    return_order.shipping_method.tax_lines
 * ]
 * output: {
 *   "order": {
 *     "items": true,
 *     "swaps": {
 *       "additional_items": true
 *     },
 *     "discounts": {
 *       "rule": true
 *     },
 *     "claims": {
 *       "additional_items": true
 *     }
 *   },
 *   "additional_items": {
 *     "variant": true
 *   },
 *   "return_order": {
 *     "items": true,
 *     "shipping_method": {
 *       "tax_lines": true
 *     }
 *   }
 * }
 * @param collection
 */
function buildRelationsOrSelect(collection) {
    var _a;
    var output = {};
    for (var _i = 0, collection_1 = collection; _i < collection_1.length; _i++) {
        var relation = collection_1[_i];
        if (relation.indexOf(".") > -1) {
            var nestedRelations = relation.split(".");
            var parent_1 = output;
            while (nestedRelations.length > 1) {
                var nestedRelation = nestedRelations.shift();
                parent_1 = parent_1[nestedRelation] = (parent_1[nestedRelation] !== true &&
                    typeof parent_1[nestedRelation] === "object"
                    ? parent_1[nestedRelation]
                    : {});
            }
            parent_1[nestedRelations[0]] = true;
            continue;
        }
        output[relation] = (_a = output[relation]) !== null && _a !== void 0 ? _a : true;
    }
    return output;
}
/**
 * Convert an order of dot string into a nested object
 * @example
 * input: { id: "ASC", "items.title": "ASC", "items.variant.title": "ASC" }
 * output: {
 *   "id": "ASC",
 *   "items": {
 *     "id": "ASC",
 *     "variant": {
 *        "title": "ASC"
 *     }
 *   },
 * }
 * @param orderBy
 */
function buildOrder(orderBy) {
    var _a;
    var output = {};
    var orderKeys = Object.keys(orderBy);
    for (var _i = 0, orderKeys_1 = orderKeys; _i < orderKeys_1.length; _i++) {
        var order = orderKeys_1[_i];
        if (order.indexOf(".") > -1) {
            var nestedOrder = order.split(".");
            var parent_2 = output;
            while (nestedOrder.length > 1) {
                var nestedRelation = nestedOrder.shift();
                parent_2 = (_a = parent_2[nestedRelation]) !== null && _a !== void 0 ? _a : (parent_2[nestedRelation] = {});
            }
            parent_2[nestedOrder[0]] = orderBy[order];
            continue;
        }
        output[order] = orderBy[order];
    }
    return output;
}
exports.buildOrder = buildOrder;
//# sourceMappingURL=build-query.js.map